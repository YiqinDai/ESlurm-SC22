<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Credential Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p> This document describe. Slurm credential plugins and the API that
defines them.
It is intended as a resource to programmers wishing to write their own
Slurm credential plugins.</p>

<p>Slurm credential plugins are Slurm plugins that implement
a digital signature mechanism.
The slurmctld daemon generates a job step credential, signs it,
and transmits it to an srun program.
The srun program then transmits it to the slurmd daemons directly.
The slurmctld daemon does not communicate directly with the slurmd
daemons at this time for performance reasons, but the job step
credential must be validated by the slurmd daemon as being
generated by the slurmctld daemon.
Digital signatures provide this validation mechanism.
The plugins must conform to the Slurm Plugin API with the following
specifications:</p>

<p><span class="commandline">const char plugin_type[]</span><br>
The major type must be &quot;cred.&quot;
The minor type can be any recognizable abbreviation for the type of
credential mechanism.
We recommend, for example:</p>
<ul>
<li><b>munge</b> &mdash; LLNL's Munge system.</li>
</ul></p>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>

<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<h2>Data Objects</h2>
<p>The implementation must maintain (though not necessarily directly export) an
enumerated <span class="commandline">errno</span> to allow Slurm to discover
as practically as possible the reason for any failed API call.
Plugin-specific enumerated integer values may be used when appropriate.

<p>These values must not be used as return values in integer-valued
functions in the API.
The proper error return value from integer-valued functions is SLURM_ERROR.
The implementation should endeavor to provide useful and pertinent
information by whatever means is practical.
Successful API calls are not required to reset any errno to a known value.
However, the initial value of any errno, prior to any error condition
arising, should be SLURM_SUCCESS. </p>

<h2>API Functions</h2>
<p>The following functions must appear.
Functions which are not implemented should be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">void *cred_read_private_key(const char *path);</p>
<p style="margin-left:.2in"><b>Description</b>: Generate a private key
based upon the contents of the supplied file.</p>
<p style="margin-left:.2in"><b>Argument</b>:<span class="commandline">path</span>&nbsp;
&nbsp;&nbsp;(input) fully-qualified pathname to the private key
as specified by the <b>JobCredentialPrivateKey</b> configuration parameter.</p>
<p style="margin-left:.2in"><b>Returns</b>: The pointer to a key on
success or NULL on failure.
Call cred_p_destroy_key() to release memory associated with this key.</p>


<p class="commandline">void *cred_p_read_public_key(const char *path);</p>
<p style="margin-left:.2in"><b>Description</b>: Generate a public key
based upon the contents of the supplied file.</p>
<p style="margin-left:.2in"><b>Argument</b>:<span class="commandline">path</span>&nbsp;
&nbsp;&nbsp;(input) fully-qualified pathname to the public key
as specified by the <b>JobCredentialPublicCertificate</b> configuration
parameter.</p>
<p style="margin-left:.2in"><b>Returns</b>: The pointer to a key on
success or NULL on failure.
Call cred_p_destroy_key() to release memory associated with this key.</p>


<p class="commandline">void cred_p_destroy_key(void *key);</p>
<p style="margin-left:.2in"><b>Description</b>: Release storage for
a public or private key.</p>
<p style="margin-left:.2in"><b>Argument</b>:<span class="commandline"> key</span>&nbsp;
&nbsp;&nbsp;(input/output) pointer to the key previously allocated
by cred_p_read_private_key() or cred_p_read_public_key().</p>


<p class="commandline">char *cred_p_str_error(void);</p>
<p style="margin-left:.2in"><b>Description</b>: Return a string
describing the last error generated by the credential software.</p>
<p style="margin-left:.2in"><b>Returns</b>: A pointer to a string.</p>

<p class="commandline">int cred_p_sign(void *key, char *buffer, int buf_size,
char **sig_pp, unsigned int *sig_size_p);</p>
<p style="margin-left:.2in"><b>Description</b>: Generate a signature for
the supplied buffer.</p>
<p style="margin-left:.2in"><b>Arguments</b>:</br>
<span class="commandline"> key</span>&nbsp;
&nbsp;&nbsp;(input) pointer to the key previously generated by
cred_p_read_private_key() or cred_p_read_public_key().<br>
<span class="commandline"> buffer</span>&nbsp; &nbsp;&nbsp;(input) data to
be signed.<br>
<span class="commandline"> buf_size</span>&nbsp; &nbsp;&nbsp;(input)
size of buffer, in bytes.<br>
<span class="commandline"> sig_pp</span>&nbsp; &nbsp;&nbsp;(input/output)
Location in which to store the signature. NOTE: The storage for
sig_pp should be allocated using xmalloc() and will be freed by
the caller using xfree().<br>
<span class="commandline"> sig_size_p</span>&nbsp; &nbsp;&nbsp;(input/output)
Location in which to store the size of the signature (sig_pp).</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful.
On failure, the plugin should return SLURM_ERROR and set the errno to an
appropriate value to indicate the reason for failure.</p>

<p class="commandline">int cred_p_verify_sign(void *key, char *buffer,
int buf_size, char *signature, unsigned int sig_size);</p>
<p style="margin-left:.2in"><b>Description</b>: Generate a signature for
the supplied buffer.</p>
<p style="margin-left:.2in"><b>Arguments</b>:</br>
<span class="commandline"> key</span>&nbsp;
&nbsp;&nbsp;(input) pointer to the key previously generated by
cred_p_read_private_key() or cred_p_read_public_key().<br>
<span class="commandline"> buffer</span>&nbsp; &nbsp;&nbsp;(input) data
previously signed by cred_p_sign().<br>
<span class="commandline"> buf_size</span>&nbsp; &nbsp;&nbsp;(input)
size of buffer, in bytes.<br>
<span class="commandline"> signature</span>&nbsp; &nbsp;&nbsp;(input)
Signature as returned in sig_pp by the cred_p_sign() function and
to be confirmed.</br>
<span class="commandline"> sig_size</span>&nbsp; &nbsp;&nbsp;(input)
Size of the signature as returned in sig_size_p by cred_p_sign().</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful.
On failure, the plugin should return SLURM_ERROR and set the errno to an
appropriate value to indicate the reason for failure.</p>


<p style="text-align:center;">Last modified 7 January 2019</p>

<!--#include virtual="footer.txt"-->
