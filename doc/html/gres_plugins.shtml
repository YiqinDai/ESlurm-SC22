<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Generic Resource (GRES) Plugin API</a></h1>

<h2>Overview</h2>
<p>This document describes Slurm generic resource (GRES) plugins and the API
that defines them. It is intended as a resource to programmers wishing to write
their own Slurm GRES plugins.</p>

<p>Slurm GRES plugins must conform to the
Slurm Plugin API with the following specifications:</p>

<span class="commandline">const char *plugin_type="<i>major/minor</i>"</span>
<p style="margin-left:.2in">
<span class="commandline"><i>major</i></span> must be
<span class="commandline">gres</span>.
<span class="commandline"><i>minor</i></span> can be any suitable name
representing the GRES type of the plugin.</p>

<span class="commandline">const char *plugin_name</span>
<p style="margin-left:.2in">
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>

<span class="commandline">const uint32_t plugin_version</span>
<p style="margin-left:.2in">
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version; however, this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>We include samples in the Slurm distribution for:
<ul>
<li><b>gpu</b> &mdash; Manage GPUs (Graphics Processing Units).
<li><b>mps</b> &mdash; Manage MPS (CUDA Multi-Process Service).
</ul>


<h2>API Functions</h2>
<p>All of the following functions are required. Functions which are not
implemented must be stubbed.

<p class="commandline"> int init(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Arguments</b>: None.</p>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Arguments</b>: None.</p>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: <span class="commandline">init()</span> and
<span class="commandline">fini()</span> are not the same as those
described in the <span class="commandline">dlopen(3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">
int node_config_load(List gres_conf_list, node_config_load_t *config)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the <i>slurm.conf</i>
and <i>gres.conf</i> files have been read.
It can be used to validate or infer the system configuration by testing the
actual hardware resources available or just confirm that an entry for the
resource was included in the <i>gres.conf</i> file.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">gres_conf_list</span>
(input/output) a list of configuration records generated by reading the
<i>slurm.conf</i> and <i>gres.conf</i> files<br>
<span class="commandline">config</span>
(input) Additional data. Contains fields
<span class="commandline">cpu_cnt</span> and
<span class="commandline">xcpuinfo_mac_to_abs</span>.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
void job_set_env(char ***job_env_ptr, void *gres_ptr, int node_inx)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the getting a job
credential and can be used to set environment variables for the job based
upon GRES state information in that credential.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_env_ptr</span>
(input/output) pointer to the job's environment variable structure.<br>
<span class="commandline">gres_ptr</span>
(input) pointer to the job's GRES allocation information.<br>
<span class="commandline">node_inx</span>
(input) zero origin node index, used to interpret node-specific GRES data.<br>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
void step_set_env(char ***job_env_ptr, void *gres_ptr, uint32_t flags)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the getting a job
step credential and can be used to set environment variables for the job step
based upon GRES state information in that credential.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_env_ptr</span>
(input/output) pointer to the job step's environment variable structure.<br>
<span class="commandline">gres_ptr</span>
(input) pointer to the step's GRES allocation information.<br>
<span class="commandline">flags</span>
(input) Various flags to alter behavior. Currently, only a verbose flag is used
to print verbose GRES binding information to stderr for each task.<br>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
void send_stepd(int fd)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon to send any needed
information to the <i>slurmstepd</i> step shepherd.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">fd</span>
(input) file descriptor to write information to.<br>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
void recv_stepd(int fd)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmstepd</i> step shepherd to read any
needed information from the <i>slurmd</i> daemon.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">fd</span>
(input) file descriptor to read information from.<br>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
int job_info(gres_job_state_t *job_gres_data, uint32_t node_inx,
enum gres_job_data_type data_type, void *data)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is used to extract plugin-specific data from the job's GRES
data structure. Note that
<span class="commandline">enum gres_job_data_type</span> values
<span class="commandline">GRES_JOB_DATA_COUNT</span> and
<span class="commandline">GRES_JOB_DATA_BITMAP</span> are processed in common
code rather than within the plugin and return data types of
<span class="commandline">uint32_t*</span> and
<span class="commandline">bitstr_t**</span>, respectively.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_gres_data</span>
(input) Information about the job's GRES resources.<br>
<span class="commandline">node_inx</span>
(input) Zero origin index within the job's resource allocation for which
data is desired.<br>
<span class="commandline">data_type</span>
(input) Type of information to be gathered from the data structure.<br>
<span class="commandline">data</span>
(output) Pointer to data within <span class="commandline">job_gres_data</span>.
No data is copied or needs to be freed.
Data type depends upon the value of
<span class="commandline">data_type</span>.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int step_info(gres_step_state_t *step_gres_data, uint32_t node_inx,
enum gres_step_data_type data_type, void *data)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is used to extract plugin-specific data from the step's GRES
data structure. Note that
<span class="commandline">enum gres_job_data_type</span> values
<span class="commandline">GRES_JOB_DATA_COUNT</span> and
<span class="commandline">GRES_JOB_DATA_BITMAP</span> are processed in common
code rather than within the plugin and return data types of
<span class="commandline">uint32_t*</span> and
<span class="commandline">bitstr_t**</span>, respectively.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">step_gres_data</span>
(input) Information about the step's GRES resources.<br>
<span class="commandline">node_inx</span>
(input) Zero origin index within the job's resource allocation for which
data is desired.<br>
<span class="commandline">data_type</span>
(input) Type of information to be gathered from the data structure.<br>
<span class="commandline">data</span>
(output) Pointer to data within <span class="commandline">step_gres_data</span>.
No data is copied or needs to be freed.
Data type depends upon the value of <span class="commandline">data_type</span>.
<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
List get_devices(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function returns the list of GRES devices.
<p style="margin-left:.2in"><b>Arguments</b>: None.</p>
<p style="margin-left:.2in"><b>Returns</b>: <br>
Returns a <span class="commandline">List</span> of GRES device records of type
<span class="commandline">gres_slurmd_conf_t</span>.

<p class="commandline">
void step_hardware_init(bitstr_t *usable_gres, char *settings)
<p style="margin-left:.2in"><b>Description</b>:<br>
Configure device hardware corresponding to all the GRES devices of the plugin
type. The <i>slurmstepd</i> calls this function while privileged and before
tasks are forked and executed. The
<i>gres/gpu</i> plugin sets GPU frequencies
here.</p>
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">usable_gres</span>
(input) A bit string specifying all GRES devices of the plugin type allocated
to the step.<br>
<span class="commandline">settings</span>
(input) A string containing device hardware settings to be set for all specified
hardware devices.<br>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
void step_hardware_fini(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
Do hardware configuration after the step is finished while privileged. This is
meant to allow Slurm to undo hardware configuration changes performed by
<span class="commandline">step_hardware_init()</span>.
The <i>slurmstepd</i> calls this function while privileged and after tasks
complete. The <i>gres/gpu</i> plugin resets GPU frequencies to high here.</p>
<p style="margin-left:.2in"><b>Arguments</b>: None.</p>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p class="commandline">
gres_epilog_info_t *epilog_build_env(gres_job_state_t *gres_job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Given a job's GRES allocation data, translated that to the data required by
<span class="commandline">epilog_set_env()</span> to set environment variables
for the <i>Prolog</i> and <i>Epilog</i> programs.</p>
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">gres_job_ptr</span>
(input) job's GRES allocation data.</p>
<p style="margin-left:.2in"><b>Returns</b>: Data structure containing the
information required by <span class="commandline">epilog_set_env()</span>
to set environment variables for the <i>Prolog</i> and <i>Epilog</i>
programs.</p>

<p class="commandline">
void epilog_set_env(char ***epilog_env_ptr, gres_epilog_info_t *epilog_info,
int node_inx)
<p style="margin-left:.2in"><b>Description</b>:<br>
Set GRES specific environment variables for the <i>Prolog</i> and
<i>Epilog</i> programs.</p>
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">epilog_env_ptr</span>
(input) environment variables set for the <i>Prolog</i> and <i>Epilog</i>
programs. This array may be reallocated as needed to contain additional
environment variables.<br>
<span class="commandline">epilog_info</span>
(input) GRES specific job allocation information. Built by
<span class="commandline">epilog_build_env()</span>.<br>
<span class="commandline">node_inx</span>
(input) zero-origin index of this node in the job's allocation. Needed to
identify the resources on a specific node allocated to this job.</p>
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p style="text-align:center;">Last modified 30 October 2020</p>

<!--#include virtual="footer.txt"-->
